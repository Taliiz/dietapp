{"version":3,"sources":["Components/Header.js","Components/amountToFloat.js","Components/cupweights.js","Components/getWeight.js","Components/handleConversion.js","Components/Converter.js","App.js","index.js"],"names":["Header","amountToFloat","o","amountNumberValue","am","amount","replace","split","console","log","a","parseFloat","toFixed","cupweights","water","allpurposeflour","breadflour","cakeflour","pastryflour","wholewheatflour","cornstarch","granulatedsugar","superfinesugar","whitesugar","sugar","castersugar","brownsugar","powderedsugar","honey","butter","margarine","milk","oil","cocoapowder","oats","rice","bakingpowder","vanillaextract","mashedripebanana","mashedbanana","sourcream","bakingsoda","cinnamon","pecan","getWeight","ingredient","unit","cupWeight","weight","ing","toLowerCase","u","Object","keys","key","indexOf","handleConversion","objArr","map","convertedValue","Converter","useState","stringArr","setArr","display","setDisplay","regex","style","textAlign","className","id","onClick","e","preventDefault","document","getElementById","value","textinput","filter","s","arr","string","lastIndex","matches","exec","output","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.d26f1073.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n    return <header>Volume units to grams ingredient converter</header>;\n}\n\nexport default Header;\n","function amountToFloat(o) {\n    let amountNumberValue = 0;\n    let am = o.amount.replace(/\\u2009/g, \" \");\n    let amount = am.split(\" \");\n    console.log(am);\n\n    for (const a of amount) {\n        if ((a === \"¼\") | (a === \"1/4\")) {\n            amountNumberValue = (\n                parseFloat(amountNumberValue) + parseFloat(0.25)\n            ).toFixed(3);\n        } else if ((a === \"⅓\") | (a === \"1/3\")) {\n            amountNumberValue = (\n                parseFloat(amountNumberValue) + parseFloat(0.333)\n            ).toFixed(3);\n        } else if ((a === \"½\") | (a === \"1/2\")) {\n            amountNumberValue = (\n                parseFloat(amountNumberValue) + parseFloat(0.5)\n            ).toFixed(3);\n        } else if ((a === \"⅔\") | (a === \"2/3\")) {\n            amountNumberValue = (\n                parseFloat(amountNumberValue) + parseFloat(0.666)\n            ).toFixed(3);\n        } else if ((a === \"¾\") | (a === \"3/4\")) {\n            amountNumberValue = (\n                parseFloat(amountNumberValue) + parseFloat(0.75)\n            ).toFixed(3);\n        } else {\n            amountNumberValue += parseFloat(a);\n        }\n    }\n    return parseFloat(amountNumberValue);\n}\n\nexport default amountToFloat;\n","const cupweights = {\n    water: 236,\n    allpurposeflour: 125,\n    breadflour: 130,\n    cakeflour: 114,\n    pastryflour: 106,\n    wholewheatflour: 113,\n    cornstarch: 125,\n    granulatedsugar: 200,\n    superfinesugar: 224,\n    whitesugar: 200,\n    sugar: 200,\n    castersugar: 224,\n    brownsugar: 195,\n    powderedsugar: 121,\n    honey: 336,\n    butter: 227,\n    margarine: 230,\n    milk: 245,\n    oil: 218,\n    cocoapowder: 125,\n    oats: 102,\n    rice: 178,\n    bakingpowder: 220,\n    vanillaextract: 208,\n    mashedripebanana: 206,\n    mashedbanana: 206,\n    sourcream: 242,\n    bakingsoda: 230,\n    cinnamon: 132,\n    pecan: 125,\n};\n\nexport default cupweights\n","import cupweights from \"./cupweights\";\n\nfunction getWeight(ingredient, unit, amount) {\n    const ing = ingredient.replace(/[\\s-]/gi, \"\").toLowerCase();\n\n    const u = unit.toLowerCase();\n\n    let cupWeight;\n\n    let weight;\n\n    for (const key of Object.keys(cupweights)) {\n        if (ing.indexOf(key) > -1) {\n            cupWeight = cupweights[key];\n        }\n    }\n\n    if (u.indexOf(\"cup\") > -1) {\n        weight = cupWeight * amount;\n    } else if (u.indexOf(\"tablespoon\") > -1 || u.indexOf(\"tbsp\") > -1) {\n        weight = cupWeight * 0.0625 * amount;\n    } else if (u.indexOf(\"teaspoon\") > -1 || u.indexOf(\"tsp\") > -1) {\n        weight = cupWeight * 0.0208 * amount;\n    }\n\n    if (weight > 10) {\n        weight = weight.toFixed(0);\n    } else {\n        weight = weight.toFixed(1);\n    }\n    \n    return weight;\n}\n\nexport default getWeight;\n","import React from \"react\";\nimport amountToFloat from \"./amountToFloat\";\nimport getWeight from \"./getWeight\";\n\nfunction handleConversion(objArr) {\n    const finalArr = objArr.map((o) => {\n        let unit = o.unit;\n        let ingredient = o.ingredient;\n        const amountNumberValue = amountToFloat(o);\n        let convertedValue;\n\n        if (unit) {\n            convertedValue = `${getWeight(\n                ingredient,\n                unit,\n                amountNumberValue\n            )}g of ${ingredient}`;\n        } else {\n            convertedValue = `${o.amount} ${ingredient}`;\n        }\n\n        return <div>{convertedValue}</div>;\n    });\n    return finalArr;\n}\n\nexport default handleConversion;\n","import React, { useState } from \"react\";\nimport handleConversion from \"./handleConversion\";\n\nfunction Converter() {\n    const [stringArr, setArr] = useState();\n    const [display, setDisplay] = useState(\"none\");\n    const regex = /(\\d[\\ ]*[ \\t]*[¼⅓½⅔¾]|[¼⅓½⅔¾]|\\d[\\ ]*[ \\t]*(?:1\\/[432]|2\\/3|3\\/4)|(?:1\\/[432]|2\\/3|3\\/4)|\\d)(?!\\S)(?:[ \\t]+(cups|cup|teaspoons|teaspoon|tsps|tsp|tablespoons|tablespoon|tbsp|tbsps))?(.*)/g;\n\n    function handleClick(e) {\n        e.preventDefault();\n        if (document.getElementById(\"text\").value) {\n            let textinput = document.getElementById(\"text\").value;\n            setArr(\n                textinput.split(/\\n/).filter((s) => {\n                    return s !== \" \";\n                })\n            );\n            setArr((arr) =>\n                arr.map((string) => {\n                    regex.lastIndex = 0;\n                    let matches = regex.exec(string);\n                    let output = {\n                        amount: matches[1],\n                        unit: matches[2],\n                        ingredient: matches[3],\n                    };\n                    console.log(matches);\n                    return output;\n                })\n            );\n            setDisplay(null);\n            setArr((e) => handleConversion(e));\n        }\n    }\n\n    return (\n        <div style={{ textAlign: \"center\" }}>\n            <h1>Enter the ingredients here</h1>\n            <textarea className=\"conversionInput\" id=\"text\"></textarea>\n            <br />\n            <button className=\"convertButton\" onClick={handleClick}>\n                Convert\n            </button>\n            <h1 style={{ display: display }}>Converted Ingredients:</h1>\n            <h2>{stringArr}</h2>\n        </div>\n    );\n}\n\nexport default Converter;\n","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport Converter from \"./Components/Converter\";\n\nfunction App() {\n    return (\n        <div>\n            <Header />\n            <Converter />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}